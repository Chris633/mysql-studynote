mysql安装 略


库：
	SHOW DATABASES;
	CREATE DATABASE name;
	DROP DATABASE name;
	USE DATABASE name;

*********************************************************
表：
创建：
	CREATE TABLE table_name (column_name column_type,column_name column_type...,CONSTRAINT...);

	数据类型:
	约束：
		*x AUTO_INCREMENT   //必须PRIMARY KEY或UNIQUE,一个表只能有一个
		*x NOT NULL
		** UNIQUE
		** PRIMARY KEY (colume_name)   // 同时具有NOT NULL与UNIQUE性质
		x* FOREIGN KEY (colume_name) REFERENCES table_name(unique_key) //关联的外键时必须满足1.colume_name不能为本表主键2.unique_key必须是主键或唯一索引(unique约束)
		3.两个键必须有相同的数据类型
		x* CHECK (column_name operator value)
		*x DEFAULT value|GETDATE()
		
		俩个*代表，create table语句时：第一个*代表约束可以随列加 第二个*代表约束可以最后加并且可以用CONSTRAINT对约束命名加

	example:
		DROP TABLE IF EXISTS `artical`;
		CREATE TABLE IF NOT EXISTS `artical`(
		   `id` INT UNSIGNED AUTO_INCREMENT,
		   `artical` VARCHAR(255),
		   PRIMARY KEY ( `id` )
		)ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;
 
		DROP TABLE IF EXISTS `blog`;
		CREATE TABLE IF NOT EXISTS `blog`(
		   `id` INT UNSIGNED AUTO_INCREMENT,
		   `title` VARCHAR(100) NOT NULL,
		   `author` VARCHAR(40) NOT NULL,
		   `submission_date` DATE,
		   `artical_id` INT UNSIGNED,
		   PRIMARY KEY ( `id` ),
		   CONSTRAINT f_key FOREIGN KEY (`artical_id`) REFERENCES artical(`id`)
		)ENGINE=InnoDB DEFAULT CHARSET=utf8 AUTO_INCREMENT=1;


删除：
	DROP INDEX table_name.index_name
	DROP TABLE table_name
	TRUNCATE TABLE table_name //只删除数据，不删除表本身


修改：
	ALTER TABLE table_name ADD column_name datatype
	ALTER TABLE table_name DROP COLUMN column_name
	ALTER TABLE table_name MODIFY COLUMN column_name datatype
	ALTER TABLE table_name ADD UNIQUE (column_name) //外键、check约束同理；主键也同理，但是主键不能有AUTO_INCREMENT约束
	ALTER TABLE table_name DROP INDEX index_name
	ALTER TABLE Persons ALTER City SET DEFAULT 'SANDNES'
	ALTER TABLE Persons ALTER City DROP DEFAULT



查看：
	SHOW TABLES;
	DESC table_name; //查看表结构

**********************************************************
数据crud:（未完）

c：
	INSERT INTO table_name (column_name1,column_name2,..) VALUES (value1,value2,value3,...),(...);
	INSERT INTO table_name (column_name,column_name) SELECT ...;


r:
	基本：
		SELECT column_name,column_name FROM table_name;	
	distinct:
		SELECT DISTINCT column_name,column_name FROM table_name;
	where:
		SELECT column_name,column_name FROM table_name WHERE column_name operator value;
	and or:
		SELECT column_name,column_name FROM table_name WHERE column_name operator value AND|OR column_name operator value;
	order by:
		SELECT column_name,column_name FROM table_name ORDER BY column_name,column_name ASC|DESC;
	limit:
		SELECT column_name FROM table_name LIMIT number;

**********************************************************
通配符：
%  _ [] [^ ]

**********************************************************
导出excel：
1.mysql -hxx -uxx -pxx -e "query statement" db > file 
2.select * from table into outfile 'xxx.txt'; 
3.navicat导出


**********************************************************
索引：（未完）
	MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。
索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索引包含多个列。创建索引时，你需要确保该索引是应用在	SQL 查询语句的条件(一般作为 WHERE 子句的条件)。实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。
建立索引会占用磁盘空间的索引文件。

http://blog.csdn.net/qq_33556185/article/details/52192551
https://www.cnblogs.com/hyd1213126/p/5828937.html




普通索引
	创建普通索引三种方法：
		1.CREATE INDEX index_name ON table_name (column_name(length)); 
		如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。
		2.ALTER table tableName ADD INDEX indexName(columnName)
		3.CREATE TABLE mytable(  
		ID INT NOT NULL,   
		username VARCHAR(16) NOT NULL,  
		INDEX [indexName] (username(length))  
		); 

	删除索引
		DROP INDEX [indexName] ON mytable; 
		DROP INDEX table_name.index_name；

唯一索引





**********************************************************
mysql性能调优：（未完）
1.调整好数据类型
2.常搜索的列加index
3.选好引擎？
4.行级锁表记锁事务？
5.优化sql？
。。。百度一下

存储引擎使用MyISAM是因为此引擎没有事务，插入速度极快，方便我们快速插入千万条测试数据，等我们插完数据，再把存储类型修改为InnoDB。

./其他文章
****************************************************
用户变量与系统变量（未完）

********************************************************
create procedure（未完）
 必须调delimiter //